{"version":3,"sources":["contexts/jokes.js","components/header.js","components/footer.js","components/JokeCard.js","pages/home.js","pages/favorites.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["JokesContext","createContext","JokesContextProvider","props","useState","jokes","setJokes","useEffect","length","getLocalStorageJokes","storage","localStorage","getItem","JSON","parse","saveOneJoke","newJoke","a","filter","joke","id","setItem","stringify","toast","success","deleteAllJokes","deleteOneJokes","jokeToDelete","newJokes","warn","Provider","value","children","Header","to","Footer","JokeCard","fetchJoke","copyClipboard","navigator","clipboard","writeText","info","className","onClick","console","log","Home","setJoke","useContext","header","axios","get","headers","res","data","position","Favorites","map","key","route","exact","path","component","home","favorites","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e98fee1.chunk.js","sourcesContent":["import React, {createContext, useState, useEffect} from 'react'\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const JokesContext = createContext()\r\n\r\nconst JokesContextProvider = (props) => {\r\n    const [jokes, setJokes] = useState([])\r\n\r\n    useEffect(() => {\r\n        if(jokes.length === 0){\r\n            getLocalStorageJokes()\r\n        }\r\n    }, [])\r\n\r\n    const getLocalStorageJokes = () => {\r\n        let storage = localStorage.getItem(\"jokes\")\r\n        if(storage){\r\n            storage = JSON.parse(storage)\r\n            setJokes([...storage])\r\n        }\r\n        else{\r\n            setJokes([])\r\n        }\r\n    }\r\n\r\n    const saveOneJoke = async (newJoke) => {\r\n        try {\r\n            // check if is joke is already saved\r\n            const isAlreadySaved = await jokes.filter(joke => joke.id === newJoke.id)\r\n            if(isAlreadySaved.length === 0){\r\n                // save into state\r\n                await setJokes([newJoke, ...jokes])\r\n                let storage = await localStorage.getItem('jokes')\r\n                if(storage){\r\n                    storage = JSON.parse(storage)\r\n                    await localStorage.setItem(\"jokes\", JSON.stringify([newJoke, ...storage]))\r\n                    toast.success(\"ü§£ OMEGALUL I'll keep it üíó\")\r\n                }\r\n                else{\r\n                    await localStorage.setItem(\"jokes\", JSON.stringify([newJoke, ...jokes]))\r\n                    toast.success(\"ü§£ OMEGALUL I'll keep it üíó\")\r\n                }\r\n                return 0\r\n            }\r\n            else\r\n                return -1\r\n        }\r\n        finally {}\r\n    }\r\n\r\n    const deleteAllJokes = async () => {\r\n        setJokes([])\r\n        localStorage.setItem(\"jokes\", JSON.stringify([]))\r\n    }\r\n\r\n    const deleteOneJokes = async (jokeToDelete) => {\r\n        try {\r\n            const newJokes = await jokes.filter(joke => joke.id !== jokeToDelete.id)\r\n            await setJokes(newJokes)\r\n            await localStorage.setItem(\"jokes\", JSON.stringify([...jokes]))\r\n            toast.warn(\"‚ùå It wasnt so funny after all ‚ùå\")\r\n        }\r\n        finally {}\r\n    }\r\n\r\n    return(\r\n        <JokesContext.Provider\r\n            value={{\r\n                jokes : jokes,\r\n                saveOneJoke : saveOneJoke,\r\n                deleteAllJokes : deleteAllJokes,\r\n                deleteOneJokes : deleteOneJokes\r\n            }}\r\n        >\r\n            {props.children}\r\n        </JokesContext.Provider>\r\n    )\r\n}\r\n\r\nexport default JokesContextProvider","import React from 'react'\r\nimport {Link} from \"react-router-dom\"\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>Dad Jokes</h1>\r\n            <nav>\r\n                <ul>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/favorites\">Favorites</Link></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Made by KrakenSIN</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst JokeCard = ({joke, saveOneJoke, fetchJoke, deleteOneJokes}) => {\r\n    const copyClipboard = async (joke) => {\r\n        if(joke){\r\n            navigator.clipboard.writeText(joke.joke)\r\n            toast.info('üìé Link is in your paste bin')\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <>\r\n            <div className=\"joke-card\">\r\n                <div className=\"joke-title\">\r\n                    <p>{joke ? joke.joke : \"Loading Jokes\"}</p>\r\n                </div>\r\n                {\r\n                    deleteOneJokes ?\r\n                    <div className=\"joke-action-container\">\r\n                        <button className=\"share\"  onClick={() => copyClipboard(joke)}>share</button>\r\n                        <button className=\"save\" onClick={() => { joke.joke ? deleteOneJokes(joke) : console.log(\"nothing to save\") }}>remove favorites</button>\r\n                    </div>\r\n                    :\r\n                    <div className=\"joke-action-container\">\r\n                        <button className=\"new\" onClick={fetchJoke}>new joke</button>\r\n                        <button className=\"share\" onClick={() => copyClipboard(joke)}>share</button>\r\n                        <button className=\"save\" onClick={() => { joke.joke ? saveOneJoke(joke) : console.log(\"nothing to save\") }}>favorite</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default JokeCard","import React, {useState, useEffect, useContext} from 'react'\r\nimport axios from 'axios'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nimport {JokesContext} from '../contexts/jokes'\r\nimport JokeCard from '../components/JokeCard'\r\n\r\nconst Home = () => {\r\n   const [joke, setJoke] = useState({})\r\n   const {saveOneJoke} = useContext(JokesContext)\r\n\r\n    useEffect(() => {\r\n        fetchJoke()\r\n    }, [])\r\n\r\n    const fetchJoke = async () => {\r\n        try {\r\n            setJoke({})\r\n            const header = {\r\n                \"Accept\": \"application/json\"\r\n            }\r\n            const res =  await axios.get('https://icanhazdadjoke.com/', {headers: header})\r\n            if (res.data){\r\n                setJoke(res.data)\r\n                toast(\"üéÅ Gotta new joke for you ü§£\")\r\n            }\r\n        }\r\n        finally {}\r\n    }\r\n\r\n    return(\r\n        <section>\r\n            <div className=\"container\">\r\n                <h2 className=\"page-title\">Dad Joke</h2>\r\n                <div className=\"jokes-container\">\r\n                    <JokeCard \r\n                        joke={joke}\r\n                        saveOneJoke={saveOneJoke}\r\n                        fetchJoke={fetchJoke} \r\n                    />\r\n                </div>\r\n                <ToastContainer position=\"bottom-center\" />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Home","import React, {useContext} from 'react'\r\nimport {JokesContext} from '../contexts/jokes'\r\nimport JokeCard from '../components/JokeCard'\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nconst Favorites = () => {\r\n    const {jokes, deleteOneJokes } = useContext(JokesContext)\r\n    return(\r\n        <section>\r\n            <div className=\"container\">\r\n                <h2 className=\"page-title\">Your favorites jokes</h2>\r\n                <div className=\"jokes-container\">\r\n                    {\r\n                        jokes.map((joke) => (\r\n                            <JokeCard \r\n                                key={joke.id}\r\n                                joke={joke} \r\n                                deleteOneJokes={deleteOneJokes}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n                <ToastContainer position=\"bottom-center\" />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Favorites","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\r\n\r\nimport JokesContextProvider from '../contexts/jokes'\r\n\r\nimport Header from '../components/header'\r\nimport Footer from '../components/footer'\r\nimport home from '../pages/home'\r\nimport favorites from '../pages/favorites'\r\n\r\nconst route = () => {\r\n    return(\r\n        <Router>\r\n            <Header />\r\n            <Switch>\r\n                <JokesContextProvider>\r\n                    <Route exact path=\"/\" component={home} />\r\n                    <Route path=\"/favorites\" component={favorites} />\r\n                </JokesContextProvider>\r\n            </Switch>\r\n            <Footer />\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default route","import React from 'react'\r\nimport './App.scss'\r\n\r\nimport Route from './routes'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Route />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}